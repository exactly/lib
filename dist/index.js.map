{"version":3,"sources":["../src/index.ts","../src/fixed-point-math/WAD.ts","../src/fixed-point-math/divWad.ts","../src/fixed-point-math/divWadUp.ts","../src/fixed-point-math/mulDiv.ts","../src/fixed-point-math/mulDivUp.ts","../src/fixed-point-math/mulWad.ts","../src/auditor/accountLiquidity.ts","../src/auditor/borrowLimit.ts","../src/fixed-point-math/MAX_UINT256.ts","../src/auditor/healthFactor.ts","../src/auditor/withdrawLimit.ts","../src/fixed-point-math/expWad.ts","../src/fixed-point-math/log2.ts","../src/fixed-point-math/lnWad.ts","../src/fixed-point-math/max.ts","../src/fixed-point-math/min.ts","../src/fixed-point-math/mulWadUp.ts","../src/fixed-point-math/sqrt.ts","../src/interest-rate-model/baseRate.ts","../src/interest-rate-model/fixedRate.ts","../src/vector/abs.ts","../src/vector/map2.ts","../src/vector/add.ts","../src/vector/fill.ts","../src/vector/sum.ts","../src/vector/mean.ts","../src/vector/mul.ts","../src/vector/map3.ts","../src/vector/mulDivUp.ts","../src/vector/powDiv.ts","../src/vector/sub.ts","../src/installments/split.ts","../src/interest-rate-model/fixedRates.ts","../src/interest-rate-model/fixedUtilization.ts","../src/interest-rate-model/floatingRate.ts","../src/interest-rate-model/floatingUtilization.ts","../src/interest-rate-model/globalUtilization.ts","../src/market/floatingDepositRates.ts","../src/vector/max.ts","../src/vector/min.ts","../src/vector/mulDiv.ts"],"sourcesContent":["export { default as accountLiquidity } from \"./auditor/accountLiquidity.js\";\nexport { default as borrowLimit } from \"./auditor/borrowLimit.js\";\nexport { default as healthFactor } from \"./auditor/healthFactor.js\";\nexport { default as withdrawLimit } from \"./auditor/withdrawLimit.js\";\n\nexport { default as divWad } from \"./fixed-point-math/divWad.js\";\nexport { default as divWadUp } from \"./fixed-point-math/divWadUp.js\";\nexport { default as expWad } from \"./fixed-point-math/expWad.js\";\nexport { default as lnWad } from \"./fixed-point-math/lnWad.js\";\nexport { default as log2 } from \"./fixed-point-math/log2.js\";\nexport { default as MAX_UINT256 } from \"./fixed-point-math/MAX_UINT256.js\";\nexport { default as max } from \"./fixed-point-math/max.js\";\nexport { default as min } from \"./fixed-point-math/min.js\";\nexport { default as mulDiv } from \"./fixed-point-math/mulDiv.js\";\nexport { default as mulDivUp } from \"./fixed-point-math/mulDivUp.js\";\nexport { default as mulWad } from \"./fixed-point-math/mulWad.js\";\nexport { default as mulWadUp } from \"./fixed-point-math/mulWadUp.js\";\nexport { default as sqrt } from \"./fixed-point-math/sqrt.js\";\nexport { default as WAD } from \"./fixed-point-math/WAD.js\";\n\nexport { default as splitInstallments } from \"./installments/split.js\";\n\nexport { default as baseRate } from \"./interest-rate-model/baseRate.js\";\nexport { default as fixedRate, MATURITY_INTERVAL } from \"./interest-rate-model/fixedRate.js\";\nexport { default as fixedRates } from \"./interest-rate-model/fixedRates.js\";\nexport { default as fixedUtilization } from \"./interest-rate-model/fixedUtilization.js\";\nexport { default as floatingRate } from \"./interest-rate-model/floatingRate.js\";\nexport { default as floatingUtilization } from \"./interest-rate-model/floatingUtilization.js\";\nexport { default as globalUtilization } from \"./interest-rate-model/globalUtilization.js\";\nexport type { default as IRMParameters, IRMFloatingParameters } from \"./interest-rate-model/Parameters.ts\";\n\nexport { default as floatingDepositRates } from \"./market/floatingDepositRates.js\";\n\nexport { default as abs } from \"./vector/abs.js\";\nexport { default as add } from \"./vector/add.js\";\nexport { default as fill } from \"./vector/fill.js\";\nexport { default as map2 } from \"./vector/map2.js\";\nexport { default as map3 } from \"./vector/map3.js\";\nexport { default as maxV } from \"./vector/max.js\";\nexport { default as mean } from \"./vector/mean.js\";\nexport { default as minV } from \"./vector/min.js\";\nexport { default as mul } from \"./vector/mul.js\";\nexport { default as mulDivV } from \"./vector/mulDiv.js\";\nexport { default as mulDivUpV } from \"./vector/mulDivUp.js\";\nexport { default as powDiv } from \"./vector/powDiv.js\";\nexport { default as sub } from \"./vector/sub.js\";\nexport { default as sum } from \"./vector/sum.js\";\n","const WAD = 1_000_000_000_000_000_000n;\nexport default WAD;\nexport const SQ_WAD = WAD * WAD;\nexport const TWO_WAD = 2n * WAD;\n","import WAD from \"./WAD.js\";\n\nexport default function divWad(a: bigint, b: bigint): bigint {\n  return (a * WAD) / b;\n}\n","import WAD from \"./WAD.js\";\n\nexport default function divWadUp(a: bigint, b: bigint): bigint {\n  return a === 0n ? 0n : (a * WAD - 1n) / b + 1n;\n}\n","export default function mulDiv(a: bigint, b: bigint, c: bigint): bigint {\n  return (a * b) / c;\n}\n","export default function mulDivUp(a: bigint, b: bigint, c: bigint): bigint {\n  const numerator = a * b;\n  return numerator === 0n ? 0n : (numerator - 1n) / c + 1n;\n}\n","import WAD from \"./WAD.js\";\n\nexport default function mulWad(a: bigint, b: bigint): bigint {\n  return (a * b) / WAD;\n}\n","import divWad from \"../fixed-point-math/divWad.js\";\nimport divWadUp from \"../fixed-point-math/divWadUp.js\";\nimport mulDiv from \"../fixed-point-math/mulDiv.js\";\nimport mulDivUp from \"../fixed-point-math/mulDivUp.js\";\nimport mulWad from \"../fixed-point-math/mulWad.js\";\n\nexport default function accountLiquidity(\n  data: AccountLiquidityData,\n  timestamp = Math.floor(Date.now() / 1000),\n): {\n  adjCollateral: bigint;\n  adjDebt: bigint;\n} {\n  let adjCollateral = 0n;\n  let adjDebt = 0n;\n  for (const {\n    isCollateral,\n    floatingBorrowAssets,\n    floatingDepositAssets,\n    fixedBorrowPositions,\n    penaltyRate,\n    decimals,\n    adjustFactor,\n    usdPrice,\n  } of data) {\n    const baseUnit = 10n ** BigInt(decimals);\n    if (isCollateral) adjCollateral += adjustCollateral(floatingDepositAssets, usdPrice, baseUnit, adjustFactor);\n\n    let totalDebt = floatingBorrowAssets;\n    for (const { position, maturity } of fixedBorrowPositions) {\n      const positionAssets = position.principal + position.fee;\n      totalDebt += positionAssets;\n      if (timestamp > maturity) totalDebt += mulWad(positionAssets, BigInt(timestamp) - maturity * penaltyRate);\n    }\n    adjDebt += divWadUp(mulDivUp(totalDebt, usdPrice, baseUnit), adjustFactor);\n  }\n\n  return { adjCollateral, adjDebt };\n}\n\nexport function adjustCollateral(\n  floatingDepositAssets: bigint,\n  usdPrice: bigint,\n  baseUnit: bigint,\n  adjustFactor: bigint,\n): bigint {\n  return mulWad(mulDiv(floatingDepositAssets, usdPrice, baseUnit), adjustFactor);\n}\n\nexport function normalizeCollateral(\n  adjustedCollateral: bigint,\n  usdPrice: bigint,\n  baseUnit: bigint,\n  adjustFactor: bigint,\n) {\n  return divWad(mulDiv(adjustedCollateral, baseUnit, usdPrice), adjustFactor);\n}\n\nexport function normalizeDebt(adjustedDebt: bigint, usdPrice: bigint, baseUnit: bigint, adjustFactor: bigint) {\n  return mulDiv(mulWad(adjustedDebt, adjustFactor), baseUnit, usdPrice);\n}\n\nexport type AccountLiquidityData = readonly {\n  market: string;\n  decimals: number;\n  usdPrice: bigint;\n  adjustFactor: bigint;\n  isCollateral: boolean;\n  floatingBorrowAssets: bigint;\n  floatingDepositAssets: bigint;\n  fixedBorrowPositions: readonly { maturity: bigint; position: { principal: bigint; fee: bigint } }[];\n  penaltyRate: bigint;\n}[];\n","import accountLiquidity, { normalizeDebt, type AccountLiquidityData } from \"./accountLiquidity.js\";\nimport divWad from \"../fixed-point-math/divWad.js\";\n\nexport default function borrowLimit(\n  data: AccountLiquidityData,\n  market: string,\n  timestamp = Math.floor(Date.now() / 1000),\n  targetHealthFactor = BigInt(1.25 * 10 ** 18),\n): bigint {\n  const { adjCollateral, adjDebt } = accountLiquidity(data, timestamp);\n  const marketData = data.find(({ market: m }) => m.toLowerCase() === market.toLowerCase());\n  if (!marketData) throw new Error(\"market not found\");\n\n  const { decimals, usdPrice, adjustFactor } = marketData;\n\n  const maxAdjDebt = divWad(adjCollateral, targetHealthFactor);\n  if (adjDebt >= maxAdjDebt) return 0n;\n\n  const maxExtraDebt = maxAdjDebt - adjDebt;\n  return normalizeDebt(maxExtraDebt, usdPrice, 10n ** BigInt(decimals), adjustFactor);\n}\n","export default 2n ** 256n - 1n;\n","import accountLiquidity, { type AccountLiquidityData } from \"./accountLiquidity.js\";\nimport MAX_UINT256 from \"../fixed-point-math/MAX_UINT256.js\";\nimport divWad from \"../fixed-point-math/divWad.js\";\n\nexport default function healthFactor(data: AccountLiquidityData, timestamp = Math.floor(Date.now() / 1000)): bigint {\n  const { adjCollateral, adjDebt } = accountLiquidity(data, timestamp);\n  return adjDebt ? divWad(adjCollateral, adjDebt) : MAX_UINT256;\n}\n","import type { AccountLiquidityData } from \"./accountLiquidity.js\";\nimport accountLiquidity, { adjustCollateral, normalizeCollateral } from \"./accountLiquidity.js\";\nimport mulWad from \"../fixed-point-math/mulWad.js\";\n\nexport default function withdrawLimit(\n  data: AccountLiquidityData,\n  market: string,\n  timestamp = Math.floor(Date.now() / 1000),\n  targetHealthFactor = BigInt(1.25 * 10 ** 18),\n): bigint {\n  const { adjCollateral, adjDebt } = accountLiquidity(data, timestamp);\n  const marketData = data.find(({ market: m }) => m.toLowerCase() === market.toLowerCase());\n  if (!marketData) throw new Error(\"market not found\");\n\n  const { decimals, usdPrice, adjustFactor, floatingDepositAssets, isCollateral } = marketData;\n  if (!isCollateral) return floatingDepositAssets;\n\n  const baseUnit = 10n ** BigInt(decimals);\n  const minAdjCollateral = mulWad(adjDebt, targetHealthFactor);\n\n  if (adjCollateral <= minAdjCollateral) return 0n;\n\n  const adjCollateralMarket = adjustCollateral(floatingDepositAssets, usdPrice, baseUnit, adjustFactor);\n  if (adjCollateral - adjCollateralMarket >= minAdjCollateral) return floatingDepositAssets;\n\n  const withdrawable = adjCollateral - minAdjCollateral;\n  return normalizeCollateral(withdrawable, usdPrice, baseUnit, adjustFactor);\n}\n","export default function expWad(x: bigint): bigint {\n  /* eslint-disable unicorn/numeric-separators-style */\n  if (x <= -42139678854452767551n) return 0n;\n  if (x >= 135305999368893231589n) throw new Error(\"EXP_OVERFLOW\");\n\n  x = (x << 78n) / 5n ** 18n;\n\n  const k = ((x << 96n) / 54916777467707473351141471128n + 2n ** 95n) >> 96n;\n  x -= k * 54916777467707473351141471128n;\n\n  let y = x + 1346386616545796478920950773328n;\n  y = ((y * x) >> 96n) + 57155421227552351082224309758442n;\n  let p = y + x - 94201549194550492254356042504812n;\n  p = ((p * y) >> 96n) + 28719021644029726153956944680412240n;\n  p = p * x + (4385272521454847904659076985693276n << 96n);\n\n  let q = x - 2855989394907223263936484059900n;\n  q = ((q * x) >> 96n) + 50020603652535783019961831881945n;\n  q = ((q * x) >> 96n) - 533845033583426703283633433725380n;\n  q = ((q * x) >> 96n) + 3604857256930695427073651918091429n;\n  q = ((q * x) >> 96n) - 14423608567350463180887372962807573n;\n  q = ((q * x) >> 96n) + 26449188498355588339934803723976023n;\n\n  const r = p / q;\n  return (r * 3822833074963236453042738258902158003155416615667n) >> (195n - k);\n  /* eslint-enable unicorn/numeric-separators-style */\n}\n","export default function log2(x: bigint) {\n  /* eslint-disable unicorn/numeric-separators-style */\n  if (x <= 0n) throw new Error(\"UNDEFINED\");\n\n  let r = BigInt(x > 0xffffffffffffffffffffffffffffffffn) << 7n;\n  r |= BigInt(x >> r > 0xffffffffffffffffn) << 6n;\n  r |= BigInt(x >> r > 0xffffffffn) << 5n;\n  r |= BigInt(x >> r > 0xffffn) << 4n;\n  r |= BigInt(x >> r > 0xffn) << 3n;\n  r |= BigInt(x >> r > 0xfn) << 2n;\n  r |= BigInt(x >> r > 0x3n) << 1n;\n  r |= BigInt(x >> r > 0x1n);\n\n  return r;\n  /* eslint-enable unicorn/numeric-separators-style */\n}\n","import log2 from \"./log2.js\";\n\nexport default function lnWad(x: bigint) {\n  /* eslint-disable unicorn/numeric-separators-style */\n  if (x <= 0n) throw new Error(\"UNDEFINED\");\n\n  const k = log2(x) - 96n;\n  x <<= 159n - k;\n  x >>= 159n;\n\n  let p = x + 3273285459638523848632254066296n;\n  p = ((p * x) >> 96n) + 24828157081833163892658089445524n;\n  p = ((p * x) >> 96n) + 43456485725739037958740375743393n;\n  p = ((p * x) >> 96n) - 11111509109440967052023855526967n;\n  p = ((p * x) >> 96n) - 45023709667254063763336534515857n;\n  p = ((p * x) >> 96n) - 14706773417378608786704636184526n;\n  p = p * x - (795164235651350426258249787498n << 96n);\n\n  let q = x + 5573035233440673466300451813936n;\n  q = ((q * x) >> 96n) + 71694874799317883764090561454958n;\n  q = ((q * x) >> 96n) + 283447036172924575727196451306956n;\n  q = ((q * x) >> 96n) + 401686690394027663651624208769553n;\n  q = ((q * x) >> 96n) + 204048457590392012362485061816622n;\n  q = ((q * x) >> 96n) + 31853899698501571402653359427138n;\n  q = ((q * x) >> 96n) + 909429971244387300277376558375n;\n\n  let r = p / q;\n\n  r *= 1677202110996718588342820967067443963516166n;\n  r += 16597577552685614221487285958193947469193820559219878177908093499208371n * k;\n  r += 600920179829731861736702779321621459595472258049074101567377883020018308n;\n  r >>= 174n;\n\n  return r;\n  /* eslint-enable unicorn/numeric-separators-style */\n}\n","export default function max(a: bigint, b: bigint): bigint {\n  return a > b ? a : b;\n}\n","export default function min(a: bigint, b: bigint): bigint {\n  return a < b ? a : b;\n}\n","import WAD from \"./WAD.js\";\n\nexport default function mulWadUp(a: bigint, b: bigint): bigint {\n  const numerator = a * b;\n  return numerator === 0n ? 0n : (numerator - 1n) / WAD + 1n;\n}\n","export default function sqrt(x: bigint): bigint {\n  /* eslint-disable unicorn/numeric-separators-style */\n  if (x === 0n) return 0n;\n\n  let y = x;\n  let z = 181n;\n\n  if (y >= 0x10000000000000000000000000000000000n) {\n    y >>= 128n;\n    z <<= 64n;\n  }\n  if (y >= 0x1000000000000000000n) {\n    y >>= 64n;\n    z <<= 32n;\n  }\n  if (y >= 0x10000000000n) {\n    y >>= 32n;\n    z <<= 16n;\n  }\n  if (y >= 0x1000000n) {\n    y >>= 16n;\n    z <<= 8n;\n  }\n\n  z = (z * (y + 65536n)) >> 18n;\n\n  for (let index = 0; index < 7; ++index) z = (z + x / z) >> 1n;\n\n  if (x / z < z) z--;\n\n  return z;\n  /* eslint-enable unicorn/numeric-separators-style */\n}\n","import type { IRMBaseParameters } from \"./Parameters.ts\";\nimport MAX_UINT256 from \"../fixed-point-math/MAX_UINT256.js\";\nimport WAD from \"../fixed-point-math/WAD.js\";\nimport expWad from \"../fixed-point-math/expWad.js\";\nimport lnWad from \"../fixed-point-math/lnWad.js\";\n\nconst EXP_THRESHOLD = 135_305_999_368_893_231_588n;\n\nexport default function baseRate(\n  uFloating: bigint,\n  uGlobal: bigint,\n  { maxUtilization, naturalUtilization, sigmoidSpeed, growthSpeed, ...p }: IRMBaseParameters,\n) {\n  if (uFloating > uGlobal) throw new Error(\"UTILIZATION_EXCEEDED\");\n  if (uGlobal >= WAD) return MAX_UINT256;\n\n  const curveA =\n    p.curveA ??\n    (((p.naturalRate * expWad((growthSpeed * lnWad(WAD - naturalUtilization / 2n)) / WAD) - 1n) / WAD +\n      1n -\n      p.minRate) *\n      (maxUtilization - naturalUtilization) *\n      maxUtilization) /\n      (naturalUtilization * WAD);\n  const curveB = p.curveB ?? p.minRate - (curveA * WAD) / maxUtilization;\n\n  const r = (curveA * WAD) / (maxUtilization - uFloating) + curveB;\n  if (uGlobal === 0n) return r;\n\n  const auxSigmoid = lnWad((naturalUtilization * WAD) / (WAD - naturalUtilization));\n  let x = -((sigmoidSpeed * (lnWad((uGlobal * WAD) / (WAD - uGlobal)) - auxSigmoid)) / WAD);\n  const sigmoid = x > EXP_THRESHOLD ? 0n : (WAD * WAD) / (WAD + expWad(x));\n\n  x = (-growthSpeed * lnWad(WAD - (sigmoid * uGlobal) / WAD)) / WAD;\n  const globalFactor = expWad(x > EXP_THRESHOLD ? EXP_THRESHOLD : x);\n\n  if (globalFactor > MAX_UINT256 / r) return MAX_UINT256;\n\n  return (r * globalFactor - 1n) / WAD + 1n;\n}\n\nexport { default as WAD } from \"../fixed-point-math/WAD.js\";\nexport type { default as IRMParameters, IRMBaseParameters } from \"./Parameters.ts\";\n","import type IRMParameters from \"./Parameters.ts\";\nimport baseRate from \"./baseRate.js\";\nimport WAD, { SQ_WAD, TWO_WAD } from \"../fixed-point-math/WAD.js\";\nimport expWad from \"../fixed-point-math/expWad.js\";\nimport lnWad from \"../fixed-point-math/lnWad.js\";\nimport sqrt from \"../fixed-point-math/sqrt.js\";\n\nexport const MATURITY_INTERVAL = 4 * 7 * 86_400;\n\nexport default function fixedRate(\n  maturity: number,\n  maxPools: number,\n  uFixed: bigint,\n  uFloating: bigint,\n  uGlobal: bigint,\n  parameters: IRMParameters,\n  timestamp = Math.floor(Date.now() / 1000),\n  base = baseRate(uFloating, uGlobal, parameters),\n  z?: bigint,\n) {\n  const { spreadFactor, maturitySpeed, timePreference, fixedAllocation, maxRate } = parameters;\n\n  if (timestamp >= maturity) throw new Error(\"ALREADY_MATURED\");\n  if (uFixed > uGlobal) throw new Error(\"UTILIZATION_EXCEEDED\");\n  if (uGlobal === 0n) return base > maxRate ? maxRate : base;\n\n  if (z === undefined) {\n    const fixedFactor = (BigInt(maxPools) * uFixed * SQ_WAD) / (uGlobal * fixedAllocation);\n    const sqFNatPools = (BigInt(maxPools) * SQ_WAD) / fixedAllocation;\n    const fNatPools = sqrt(sqFNatPools * WAD);\n    const natPools = ((TWO_WAD - sqFNatPools) * SQ_WAD) / (fNatPools * (WAD - fNatPools));\n    z = (natPools * sqrt(fixedFactor * WAD)) / WAD + ((WAD - natPools) * fixedFactor) / WAD - WAD;\n  }\n\n  const maturityFactor = (BigInt(maturity - timestamp) * WAD) / BigInt(maxPools * MATURITY_INTERVAL);\n\n  const spread =\n    WAD + (expWad((maturitySpeed * lnWad(maturityFactor)) / WAD) * (timePreference + (spreadFactor * z) / WAD)) / WAD;\n\n  if (base >= (maxRate * WAD) / spread) return maxRate;\n  return (base * spread - 1n) / WAD + 1n;\n}\n\nexport { default as WAD } from \"../fixed-point-math/WAD.js\";\nexport type { default as IRMParameters } from \"./Parameters.ts\";\n","export default function abs(array: readonly bigint[]) {\n  return array.map((value) => (value < 0n ? -value : value));\n}\n","export default function map2(a: readonly bigint[], b: readonly bigint[] | bigint, f: (a: bigint, b: bigint) => bigint) {\n  if (Array.isArray(b)) {\n    if (a.length !== b.length) throw new Error(\"different length\");\n    return a.map((value, index) => f(value, b[index]!)); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  return a.map((value) => f(value, b));\n}\n\ndeclare global {\n  interface ArrayConstructor {\n    isArray(argument: unknown): argument is unknown[] | readonly unknown[];\n  }\n}\n","import map2 from \"./map2.js\";\n\nexport default function add(a: readonly bigint[], b: readonly bigint[] | bigint) {\n  return map2(a, b, (a_, b_) => a_ + b_);\n}\n","export default function fill(length: number, value = 0n) {\n  return Array.from<bigint>({ length }).fill(value);\n}\n","export default function sum(array: readonly bigint[]) {\n  return array.reduce((accumulator, value) => accumulator + value);\n}\n","import sum from \"./sum.js\";\n\nexport default function mean(array: readonly bigint[]) {\n  return sum(array) / BigInt(array.length);\n}\n","import map2 from \"./map2.js\";\n\nexport default function mul(a: readonly bigint[], b: readonly bigint[] | bigint) {\n  return map2(a, b, (a_, b_) => a_ * b_);\n}\n","export default function map3(\n  a: readonly bigint[],\n  b: readonly bigint[] | bigint,\n  c: readonly bigint[] | bigint,\n  f: (a: bigint, b: bigint, c: bigint) => bigint,\n) {\n  if (Array.isArray(b) && Array.isArray(c)) {\n    if (a.length !== b.length || a.length !== c.length) throw new Error(\"different length\");\n    return a.map((value, index) => f(value, b[index]!, c[index]!)); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  } else if (Array.isArray(b)) {\n    if (a.length !== b.length) throw new Error(\"different length\");\n    return a.map((value, index) => f(value, b[index]!, c as bigint)); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  } else if (Array.isArray(c)) {\n    if (a.length !== c.length) throw new Error(\"different length\");\n    return a.map((value, index) => f(value, b, c[index]!)); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  }\n  return a.map((value) => f(value, b, c));\n}\n\ndeclare global {\n  interface ArrayConstructor {\n    isArray(argument: unknown): argument is unknown[] | readonly unknown[];\n  }\n}\n","import map3 from \"./map3.js\";\n\nexport default function mulDivUp(a: readonly bigint[], b: readonly bigint[] | bigint, c: readonly bigint[] | bigint) {\n  return map3(a, b, c, (a_, b_, c_) => (a_ * b_ - 1n) / c_ + 1n);\n}\n","import map3 from \"./map3.js\";\n\nexport default function powDiv(a: readonly bigint[], b: readonly bigint[] | bigint, c: readonly bigint[] | bigint) {\n  return map3(a, b, c, (a_, b_, c_) => a_ ** b_ / c_);\n}\n","import map2 from \"./map2.js\";\n\nexport default function sub(a: readonly bigint[], b: readonly bigint[] | bigint) {\n  return map2(a, b, (a_, b_) => a_ - b_);\n}\n","import WAD from \"../fixed-point-math/WAD.js\";\nimport expWad from \"../fixed-point-math/expWad.js\";\nimport lnWad from \"../fixed-point-math/lnWad.js\";\nimport fixedRate, { MATURITY_INTERVAL, type IRMParameters } from \"../interest-rate-model/fixedRate.js\";\nimport abs from \"../vector/abs.js\";\nimport add from \"../vector/add.js\";\nimport fill from \"../vector/fill.js\";\nimport mean from \"../vector/mean.js\";\nimport mul from \"../vector/mul.js\";\nimport mulDivUp from \"../vector/mulDivUp.js\";\nimport powDiv from \"../vector/powDiv.js\";\nimport sub from \"../vector/sub.js\";\nimport sum from \"../vector/sum.js\";\n\nexport const ONE_YEAR = 365n * 86_400n;\n\nexport default function splitInstallments(\n  totalAmount: bigint,\n  totalAssets: bigint,\n  firstMaturity: number,\n  maxPools: number,\n  uFixed: readonly bigint[],\n  uFloating: bigint,\n  uGlobal: bigint,\n  parameters: IRMParameters,\n  timestamp = Math.floor(Date.now() / 1000),\n  { power = (WAD * 60n) / 100n, scaleFactor = (WAD * 95n) / 100n, tolerance = 20n, maxIterations = 66_666n } = {},\n) {\n  const uGlobalAfter = uGlobal + (totalAmount * WAD - 1n) / totalAssets + 1n;\n  const weight = max(\n    uGlobalAfter < WAD ? (scaleFactor * expWad((power * lnWad(WAD - uGlobalAfter)) / WAD)) / WAD : 1n,\n    10n ** 15n,\n  );\n\n  let iterations = 0;\n  let rates: bigint[] = [];\n  let installments: bigint[] = [];\n  let amounts = fill(uFixed.length, (totalAmount - 1n) / BigInt(uFixed.length) + 1n);\n  let error = 0n;\n  do {\n    if (iterations++ >= maxIterations) throw new Error(\"MAX_ITERATIONS_EXCEEDED\");\n    let uGlobalAccumulator = uGlobal;\n    rates = uFixed.map((uFixedBefore, index) => {\n      const amount = amounts[index]!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      const maturity = firstMaturity + index * MATURITY_INTERVAL;\n      const uFixedAfter = amount ? uFixedBefore + (amount * WAD - 1n) / totalAssets + 1n : uFixedBefore;\n      if (amount) uGlobalAccumulator += (amount * WAD - 1n) / totalAssets + 1n;\n      return fixedRate(maturity, maxPools, uFixedAfter, uFloating, uGlobalAccumulator, parameters, timestamp);\n    });\n    installments = rates.map((rate, index) => {\n      const amount = amounts[index]!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      const maturity = firstMaturity + index * MATURITY_INTERVAL;\n      return amount + (amount * rate * BigInt(maturity - timestamp)) / (WAD * ONE_YEAR);\n    });\n\n    const diffs = sub(installments, mean(installments));\n    amounts = sub(amounts, mulDivUp(diffs, weight, WAD));\n    amounts = mulDivUp(amounts, totalAmount, sum(amounts));\n    const excess = sum(amounts) - totalAmount;\n    for (let index = 0; index < excess; ++index) amounts[index]! -= 1n; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    error = mean(mulDivUp(abs(diffs), weight, WAD));\n  } while (error >= tolerance);\n\n  const maturityFactors = rates.map(\n    (_, index) => (BigInt(firstMaturity + index * MATURITY_INTERVAL - timestamp) * WAD) / ONE_YEAR,\n  );\n  const y = mul(installments, WAD);\n  let effectiveRate = rates[0]!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  iterations = 0;\n  error = 0n;\n  do {\n    if (iterations++ >= maxIterations) throw new Error(\"MAX_ITERATIONS_EXCEEDED\");\n    const aux = add(mulDivUp(maturityFactors, effectiveRate, WAD), WAD);\n    const f = sum(mulDivUp(y, WAD, aux)) - totalAmount * WAD;\n    const fp = -sum(mulDivUp(y, maturityFactors, powDiv(aux, 2n, WAD)));\n    const rateDiff = (-f * WAD) / fp;\n    effectiveRate += rateDiff;\n    error = rateDiff < 0n ? -rateDiff : rateDiff;\n  } while (error >= tolerance);\n\n  return { amounts, installments, rates, effectiveRate };\n}\n\nfunction max(a: bigint, b: bigint) {\n  return a > b ? a : b;\n}\n","import type IRMParameters from \"./Parameters.js\";\nimport baseRate from \"./baseRate.js\";\nimport fixedRate, { MATURITY_INTERVAL } from \"./fixedRate.js\";\n\nexport default function fixedRates(\n  firstMaturity: number,\n  maxPools: number,\n  uFixed: readonly bigint[],\n  uFloating: bigint,\n  uGlobal: bigint,\n  parameters: IRMParameters,\n  timestamp = Math.floor(Date.now() / 1000),\n) {\n  const base = baseRate(uFloating, uGlobal, parameters);\n  return uFixed.map((uFixedBefore, index) => {\n    const maturity = firstMaturity + index * MATURITY_INTERVAL;\n    fixedRate(maturity, maxPools, uFixedBefore, uFloating, uGlobal, parameters, timestamp, base);\n  });\n}\n\nexport { default as WAD } from \"../fixed-point-math/WAD.js\";\nexport type { default as IRMParameters } from \"./Parameters.js\";\n","import WAD from \"../fixed-point-math/WAD.js\";\n\nexport default function fixedUtilization(supplied: bigint, borrowed: bigint, assets: bigint) {\n  return assets !== 0n && borrowed > supplied ? ((borrowed - supplied) * WAD - 1n) / assets + 1n : 0n;\n}\n","import type { IRMFloatingParameters } from \"./Parameters.ts\";\nimport baseRate from \"./baseRate.js\";\n\nexport default function floatingRate(uFloating: bigint, uGlobal: bigint, parameters: IRMFloatingParameters) {\n  const { maxRate } = parameters;\n  const base = baseRate(uFloating, uGlobal, parameters);\n  return base > maxRate ? maxRate : base;\n}\n\nexport { default as WAD } from \"../fixed-point-math/WAD.js\";\nexport type { default as IRMParameters, IRMFloatingParameters } from \"./Parameters.ts\";\n","import WAD from \"../fixed-point-math/WAD.js\";\n\nexport default function floatingUtilization(assets: bigint, debt: bigint) {\n  return assets !== 0n && debt !== 0n ? (debt * WAD - 1n) / assets + 1n : 0n;\n}\n","import WAD from \"../fixed-point-math/WAD.js\";\n\nexport default function globalUtilization(assets: bigint, debt: bigint, backupBorrowed: bigint) {\n  return assets !== 0n && debt + backupBorrowed !== 0n ? ((debt + backupBorrowed) * WAD - 1n) / assets + 1n : 0n;\n}\n","import WAD from \"../fixed-point-math/WAD.js\";\nimport divWad from \"../fixed-point-math/divWad.js\";\nimport mulDiv from \"../fixed-point-math/mulDiv.js\";\nimport mulWad from \"../fixed-point-math/mulWad.js\";\n\nconst YEAR_IN_SECONDS = 365n * 86_400n;\n\nexport default function floatingDepositRates(\n  snapshots: readonly MarketSnapshot[],\n  timestamp = Math.floor(Date.now() / 1000),\n  elapsed = 10 * 60,\n) {\n  return snapshots.map((snapshot) => {\n    const projectedTotalAssets = projectTotalAssets(snapshot, timestamp + elapsed);\n    const totalAssetsBefore = snapshot.totalAssets;\n    const assetsInYear = ((projectedTotalAssets - totalAssetsBefore) * YEAR_IN_SECONDS) / BigInt(elapsed);\n    return { market: snapshot.market, rate: divWad(assetsInYear, totalAssetsBefore) };\n  });\n}\n\nfunction projectTotalAssets(snapshot: MarketSnapshot, timestamp: number) {\n  const {\n    earningsAccumulator,\n    earningsAccumulatorSmoothFactor,\n    floatingAssets,\n    floatingDebt,\n    floatingRate,\n    interval,\n    lastAccumulatorAccrual,\n    lastFloatingDebtUpdate,\n    maxFuturePools,\n    pools,\n    treasuryFeeRate,\n  } = snapshot;\n  const elapsedAccumulator = BigInt(timestamp - lastAccumulatorAccrual);\n  const accumulatedEarnings =\n    (earningsAccumulator * elapsedAccumulator) /\n    (elapsedAccumulator + mulWad(earningsAccumulatorSmoothFactor, BigInt(maxFuturePools) * interval));\n\n  const newDebt = mulWad(\n    floatingDebt,\n    mulDiv(floatingRate, BigInt(timestamp - lastFloatingDebtUpdate), YEAR_IN_SECONDS),\n  );\n  const backupEarnings = fixedPoolEarnings(pools, timestamp);\n  return floatingAssets + backupEarnings + accumulatedEarnings + mulWad(newDebt, WAD - treasuryFeeRate);\n}\n\nfunction fixedPoolEarnings(pools: readonly FixedPool[], timestamp: number) {\n  let backupEarnings = 0n;\n  for (const { lastAccrual, maturity, unassignedEarnings } of pools) {\n    if (maturity > lastAccrual) {\n      backupEarnings +=\n        timestamp < maturity\n          ? mulDiv(unassignedEarnings, BigInt(timestamp) - lastAccrual, BigInt(maturity - lastAccrual))\n          : unassignedEarnings;\n    }\n  }\n  return backupEarnings;\n}\n\nexport interface MarketSnapshot {\n  market: string;\n  floatingDebt: bigint;\n  floatingBackupBorrowed: bigint;\n  pools: readonly FixedPool[];\n  floatingAssets: bigint;\n  treasuryFeeRate: bigint;\n  earningsAccumulator: bigint;\n  earningsAccumulatorSmoothFactor: bigint;\n  lastFloatingDebtUpdate: number;\n  lastAccumulatorAccrual: number;\n  maxFuturePools: number;\n  interval: bigint;\n  totalAssets: bigint;\n  floatingRate: bigint;\n}\n\ninterface FixedPool {\n  maturity: bigint;\n  lastAccrual: bigint;\n  unassignedEarnings: bigint;\n}\n","export default function max(array: readonly bigint[]) {\n  return array.reduce((maxValue, value) => (value > maxValue ? value : maxValue)); // eslint-disable-line unicorn/no-array-reduce\n}\n","export default function min(array: readonly bigint[]) {\n  return array.reduce((minValue, value) => (value < minValue ? value : minValue)); // eslint-disable-line unicorn/no-array-reduce\n}\n","import map3 from \"./map3.js\";\n\nexport default function mulDiv(a: readonly bigint[], b: readonly bigint[] | bigint, c: readonly bigint[] | bigint) {\n  return map3(a, b, c, (a_, b_, c_) => (a_ * b_) / c_);\n}\n"],"mappings":"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","names":["max","min","mulDivUp","mulDiv","mulDivUp","max","mulDivUp","floatingRate","max","min","mulDiv"]}